using EdTechApp.Models;

namespace EdTechApp.Services
{
    public class StudentService
    {
        private readonly List<Student> _students = new List<Student>();

        // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
        public void AddStudent(Student student)
        {
            if (string.IsNullOrWhiteSpace(student.Name))
                throw new ArgumentException("–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º.");

            if (!student.Email.Contains("@"))
                throw new ArgumentException("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email.");

            if (student.Age < 16 || student.Age > 100)
                throw new ArgumentException("–í—ñ–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 16 –¥–æ 100.");

            if (_students.Any(s => s.Email == student.Email))
                throw new ArgumentException("–°—Ç—É–¥–µ–Ω—Ç –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.");

            _students.Add(student);
            Console.WriteLine($"‚úÖ –°—Ç—É–¥–µ–Ω—Ç–∞ {student.Name} –¥–æ–¥–∞–Ω–æ.");
        }

        // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        public List<Student> GetAllStudents()
        {
            return _students;
        }

        // –ü–æ—à—É–∫ –∑–∞ email
        public Student? GetStudentByEmail(string email)
        {
            return _students.FirstOrDefault(s => s.Email == email);
        }

        // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        public void UpdateStudent(string email, string? newName = null, int? newAge = null, string? newGroup = null, bool? newStatus = null)
        {
            var student = GetStudentByEmail(email);
            if (student == null)
            {
                Console.WriteLine("–°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            if (!string.IsNullOrWhiteSpace(newName)) student.Name = newName;
            if (newAge.HasValue) student.Age = newAge.Value;
            if (!string.IsNullOrWhiteSpace(newGroup)) student.Group = newGroup;
            if (newStatus.HasValue) student.IsActive = newStatus.Value;

            Console.WriteLine($"‚úèÔ∏è –î–∞–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.Email} –æ–Ω–æ–≤–ª–µ–Ω–æ.");
        }

        // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        public void DeleteStudent(string email)
        {
            var student = GetStudentByEmail(email);
            if (student == null)
            {
                Console.WriteLine("–°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            _students.Remove(student);
            Console.WriteLine($"üóëÔ∏è –°—Ç—É–¥–µ–Ω—Ç–∞ {student.Name} –≤–∏–¥–∞–ª–µ–Ω–æ.");
        }

        // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        public List<Student> GetActiveStudents()
        {
            return _students.Where(s => s.IsActive).ToList();
        }

        public void ShowAllProgress()
        {
            foreach (var student in _students)
                student.ShowProgress();
        }

    }
}